

# This file was *autogenerated* from the file tests.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6 = Integer(6); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8); _sage_const_10 = Integer(10); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_5 = Integer(5)# File containing some tests for the functions in GraphClasses.sage
# To run these, type 'sage tests.sage'

load("GraphClasses.sage")

def run_tests():
    tests=[test_tau,test_is_LC_eq,test_has_VM,test_is_DH]
    for test in tests:
        try:
            test()
            print("OK")
            print("\n")
        except AssertionError:
            print("FAIL")
            print("\n")

def test_tau():
    print("Testing local complementation (tau)")
    G=SimpleGraph(graphs.StarGraph(_sage_const_6 ))
    assert(G*_sage_const_0 ==SimpleGraph(graphs.CompleteGraph(_sage_const_7 )))

def test_is_LC_eq():
    print("Testing function to check for LC-equivalence (is_LC_eq)")
    G=SimpleGraph(graphs.CycleGraph(_sage_const_8 ))
    for _ in range(_sage_const_10 ):
        m=[]
        for _ in range(_sage_const_10 ):
            m.append(G.random_vertex())
        assert(G.is_LC_eq(G*m))

    G1=SimpleGraph(graphs.PathGraph(_sage_const_4 ))
    G2=SimpleGraph(graphs.CompleteGraph(_sage_const_4 ))
    assert(not G1.is_LC_eq(G2))

def tmp_has_VM():
    Gp=SimpleGraph(graphs.StarGraph(_sage_const_3 ))

    # Test brute force alg yes-instaces (connected)
    for _ in range(_sage_const_10 ):
        G=SimpleGraph(Gp)
        for _ in range(_sage_const_6 ):
            verts=G.vertices()
            v=G.add_vertex()
            num_edges=randint(_sage_const_1 ,len(G)-_sage_const_1 )
            neighbors=Subsets(verts,num_edges).random_element()
            G.add_edges([(v,n) for n in neighbors])
        m=[]
        for _ in range(_sage_const_10 ):
            m.append(G.random_vertex())
        m2=(G*m).has_VM(Gp,method='brute')
        print(m2)
        print(((G*m)*m2).subgraph([_sage_const_0 ,_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]).is_LC_eq(Gp))

    # Test brute force alg yes-instaces (disconnected)
    G=SimpleGraph(Gp)
    for _ in range(_sage_const_6 ):
        verts=G.vertices()
        v=G.add_vertex()
        num_edges=randint(_sage_const_0 ,len(G)-_sage_const_1 )
        neighbors=Subsets(verts,num_edges).random_element()
        G.add_edges([(v,n) for n in neighbors])
    G.add_vertex()
    m=[]
    for _ in range(_sage_const_10 ):
        m.append(G.random_vertex())
    m2=(G*m).has_VM(Gp,method='brute')
    print(m2)
    print(((G*m)*m2).subgraph([_sage_const_0 ,_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]).is_LC_eq(Gp))

    # Test brute force alg no-instaces (connected)
    G=SimpleGraph({_sage_const_0 :[_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ],_sage_const_1 :[_sage_const_0 ],_sage_const_2 :[_sage_const_0 ,_sage_const_3 ,_sage_const_4 ],_sage_const_3 :[_sage_const_0 ,_sage_const_2 ,_sage_const_4 ],_sage_const_4 :[_sage_const_0 ,_sage_const_2 ,_sage_const_3 ]})
    m2=G.has_VM(Gp,method='brute')
    print(m2)
    # print(((G*m)*m2).subgraph([0,1,2,3])==Gp)

def test_has_VM():
    print("Testing function to check for vertex-minors (has_VM)")
    Gp=SimpleGraph(graphs.StarGraph(_sage_const_3 ))

    # Test brute force alg yes-instaces (connected)
    for _ in range(_sage_const_10 ):
        G=SimpleGraph(Gp)
        for _ in range(_sage_const_6 ):
            verts=G.vertices()
            v=G.add_vertex()
            num_edges=randint(_sage_const_1 ,len(G)-_sage_const_1 )
            neighbors=Subsets(verts,num_edges).random_element()
            G.add_edges([(v,n) for n in neighbors])
        m=[]
        for _ in range(_sage_const_10 ):
            m.append(G.random_vertex())
        m2=(G*m).has_VM(Gp,method='brute')
        assert(((G*m)*m2).subgraph([_sage_const_0 ,_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]).is_LC_eq(Gp))

    # Test brute force alg yes-instaces (disconnected)
    G=SimpleGraph(Gp)
    for _ in range(_sage_const_6 ):
        verts=G.vertices()
        v=G.add_vertex()
        num_edges=randint(_sage_const_0 ,len(G)-_sage_const_1 )
        neighbors=Subsets(verts,num_edges).random_element()
        G.add_edges([(v,n) for n in neighbors])
    G.add_vertex()
    m=[]
    for _ in range(_sage_const_10 ):
        m.append(G.random_vertex())
    m2=(G*m).has_VM(Gp,method='brute')
    assert(((G*m)*m2).subgraph([_sage_const_0 ,_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]).is_LC_eq(Gp))

    # Test brute force alg no-instaces (connected)
    G=SimpleGraph({_sage_const_0 :[_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ],_sage_const_1 :[_sage_const_0 ],_sage_const_2 :[_sage_const_0 ,_sage_const_3 ,_sage_const_4 ],_sage_const_3 :[_sage_const_0 ,_sage_const_2 ,_sage_const_4 ],_sage_const_4 :[_sage_const_0 ,_sage_const_2 ,_sage_const_3 ]})
    assert(not G.has_VM(Gp,method='brute'))
    # Test DH alg no-instaces (connected)
    assert(not G.has_VM(Gp,method='DH'))

    # Test DH alg yes-instaces (connected)
    for _ in range(_sage_const_10 ):
        G=SimpleGraph(Gp)
        for _ in range(_sage_const_6 ):
            b=randint(_sage_const_0 ,_sage_const_1 )
            if b: # add leaf
                u=G.random_vertex()
                v=G.add_vertex()
                G.add_edge((u,v))
            else: # do twin split
                u=G.random_vertex()
                neighbors=G.neighbors(u)
                v=G.add_vertex()
                G.add_edges([(v,n) for n in neighbors])
                b=randint(_sage_const_0 ,_sage_const_1 )
                if b: # true or false twin
                    G.add_edge((u,v))
        m=[]
        for _ in range(_sage_const_10 ):
            m.append(G.random_vertex())
        m2=(G*m).has_VM(Gp,method='DH')
        assert(((G*m)*m2).subgraph([_sage_const_0 ,_sage_const_1 ,_sage_const_2 ,_sage_const_3 ]).is_LC_eq(Gp))

def test_is_DH():
    print("Testing function to check if a graph is distance-hereditary (is_DH)")
    for _ in range(_sage_const_10 ):
        G=SimpleGraph(_sage_const_1 )
        for _ in range(_sage_const_10 ):
            b=randint(_sage_const_0 ,_sage_const_1 )
            if b: # add leaf
                u=G.random_vertex()
                v=G.add_vertex()
                G.add_edge((u,v))
            else: # do twin split
                u=G.random_vertex()
                neighbors=G.neighbors(u)
                v=G.add_vertex()
                G.add_edges([(v,n) for n in neighbors])
                b=randint(_sage_const_0 ,_sage_const_1 )
                if b: # true or false twin
                    G.add_edge((u,v))
        assert(G.is_DH())

    G=SimpleGraph(graphs.CycleGraph(_sage_const_5 ))
    assert(not G.is_DH())


# Run all tests
run_tests()
# tmp_has_VM()

